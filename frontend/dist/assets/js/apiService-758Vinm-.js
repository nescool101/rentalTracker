import{a as m}from"./utils-vendor-CNi8B-Rx.js";const h="/api",$="auth_token",s=m.create({baseURL:h,headers:{"Content-Type":"application/json"}}),y=m.create({baseURL:h,headers:{"Content-Type":"application/json"}});s.interceptors.request.use(e=>{const t=localStorage.getItem($);return t&&(e.headers=e.headers||{},e.headers.Authorization=`Bearer ${t}`),e},e=>(console.error("Auth interceptor error:",e),Promise.reject(e)));s.interceptors.request.use(e=>(console.log("API Request:",{method:e.method,url:e.url,headers:e.headers}),e),e=>(console.error("API Request Error:",e),Promise.reject(e)));s.interceptors.response.use(e=>(console.log("API Response:",{status:e.status,url:e.config.url,data:e.data?Array.isArray(e.data)?`Array with ${e.data.length} items`:e.data:null}),e),e=>(console.error("API Response Error:",{message:e.message,response:e.response?{status:e.response.status,data:e.response.data}:"No response",config:e.config?{url:e.config.url,method:e.config.method}:"No config"}),Promise.reject(e)));const f={getAll:async()=>(await s.get("/persons")).data,getById:async e=>(await s.get(`/persons/${e}`)).data,getByRole:async e=>(await s.get(`/persons/role/${e}`)).data,create:async e=>(await s.post("/persons",e)).data,update:async(e,t)=>(await s.put(`/persons/${e}`,t)).data,delete:async e=>{await s.delete(`/persons/${e}`)}},l={getAll:async()=>(await s.get("/properties")).data,getForCurrentUser:async e=>e?l.getAll():(console.error("API: getForCurrentUser (Property) called with no user. Returning empty."),[]),getById:async e=>(await s.get(`/properties/${e}`)).data,getByResidentId:async e=>(await s.get(`/properties/resident/${e}`)).data,getByManagerId:async e=>(await s.get(`/properties/manager/${e}`)).data,create:async e=>(await s.post("/properties",e)).data,update:async(e,t)=>(await s.put(`/properties/${e}`,t)).data,delete:async e=>{await s.delete(`/properties/${e}`)}},d={getAll:async()=>(await s.get("/maintenance-requests")).data,getForCurrentUser:async e=>{if(!e)return console.error("API: User not available for fetching maintenance requests"),[];if(e.role==="admin")return d.getAll();const t=e.role==="user"?"resident":e.role;if(t==="manager"){if(!e.person_id)return console.error("API (Manager): person_id not available for manager. Cannot fetch requests."),[];try{const r=await l.getByManagerId(e.person_id);if(!r||r.length===0)return[];const a=r.map(n=>n.id).filter(n=>!!n);return a.length===0?[]:d.getByPropertyIds(a)}catch(r){return console.error("API (Manager): Error fetching maintenance requests:",r),[]}}if(t==="resident"){if(!e.person_id)return console.error("API (Resident/User): person_id not available. Cannot fetch requests."),[];try{const r=await u.getByRenterId(e.person_id);if(!r||r.length===0){const n=await l.getByResidentId(e.person_id);if(!n||n.length===0)return[];const i=n.map(c=>c.id).filter(c=>!!c);return i.length===0?[]:d.getByPropertyIds(i)}const a=Array.from(new Set(r.map(n=>n.property_id).filter(n=>!!n)));return a.length===0?[]:d.getByPropertyIds(a)}catch(r){return console.error("API (Resident): Error fetching maintenance requests:",r),[]}}return[]},getById:async e=>(await s.get(`/maintenance-requests/${e}`)).data,getByPropertyId:async e=>(await s.get(`/maintenance-requests/property/${e}`)).data,getByPropertyIds:async e=>e.length===0?[]:(await s.post("/maintenance-requests/property-ids",e)).data,getByRenterId:async e=>(await s.get(`/maintenance-requests/renter/${e}`)).data,getByStatus:async e=>(await s.get(`/maintenance-requests/status/${e}`)).data,create:async e=>(await s.post("/maintenance-requests",e)).data,update:async(e,t)=>(await s.put(`/maintenance-requests/${e}`,t)).data,delete:async e=>{await s.delete(`/maintenance-requests/${e}`)}},u={getAll:async()=>(await s.get("/rentals")).data,getById:async e=>(await s.get(`/rentals/${e}`)).data,getByPropertyId:async e=>(await s.get(`/rentals/property/${e}`)).data,getByRenterId:async e=>(await s.get(`/rentals/renter/${e}`)).data,getActive:async()=>(await s.get("/rentals/active")).data,create:async e=>(await s.post("/rentals",e)).data,update:async(e,t)=>(await s.put(`/rentals/${e}`,t)).data,delete:async e=>{await s.delete(`/rentals/${e}`)}},g={getAll:async()=>(await s.get("/payments")).data,getForCurrentUser:async e=>{if(!e)return console.error("API (Payments): User not available."),[];if(e.role==="admin")return g.getAll();if(!e.person_id)return console.error(`API (Payments): User ${e.id} (role ${e.role}) has no person_id. Cannot fetch payments.`),[];try{let t=[];if(e.role==="manager"){const a=await l.getByManagerId(e.person_id);if(a.length===0)return[];const i=a.map(p=>p.id).map(p=>u.getByPropertyId(p));t=(await Promise.all(i)).flat().map(p=>p.id)}else(e.role==="resident"||e.role==="user")&&(t=(await u.getByRenterId(e.person_id)).map(n=>n.id));return t.length===0?[]:(await g.getAll()).filter(a=>t.includes(a.rental_id))}catch(t){return console.error(`API (Payments): Error fetching payments for user ${e.person_id}:`,t),[]}},getById:async e=>(await s.get(`/payments/${e}`)).data,getByRentalId:async e=>(await s.get(`/payments/rental/${e}`)).data,getByRentalIds:async e=>e.length===0?[]:(await s.post("/payments/rental-ids",e)).data,getLatePayments:async()=>(await s.get("/payments/late")).data,getByDateRange:async(e,t)=>(await s.get(`/payments/date-range?start_date=${e}&end_date=${t}`)).data,create:async e=>(await s.post("/payments",e)).data,update:async(e,t)=>(await s.put(`/payments/${e}`,t)).data,delete:async e=>{await s.delete(`/payments/${e}`)}},w={getAll:async e=>(await s.get("/rental-history",{params:e})).data,getByPersonId:async e=>(await s.get(`/rental-history/person/${e}`)).data,getForCurrentUser:async(e,t)=>e?e.role==="admin"?w.getAll(t):e.person_id?w.getByPersonId(e.person_id):(console.error(`API (RentalHistory): User ${e.id} (role ${e.role}) has no person_id. Cannot fetch rental history.`),[]):[],getById:async e=>(await s.get(`/rental-history/${e}`)).data,getByRentalId:async e=>(await s.get(`/rental-history/rental/${e}`)).data,getByStatus:async e=>(await s.get(`/rental-history/status/${e}`)).data,getByDateRange:async(e,t)=>(await s.get(`/rental-history/date-range?start_date=${e}&end_date=${t}`)).data,getByRentalIds:async e=>e.length===0?[]:(await s.post("/rental-history/for-rentals",{rental_ids:e})).data,create:async e=>(await s.post("/rental-history",e)).data,update:async(e,t)=>(await s.put(`/rental-history/${e}`,t)).data,delete:async e=>{await s.delete(`/rental-history/${e}`)}},A={getAll:async()=>(await s.get("/users")).data,getById:async e=>(await s.get(`/users/${e}`)).data,create:async e=>(await s.post("/users",e)).data,update:async(e,t)=>(await s.put(`/users/${e}`,t)).data,delete:async e=>{await s.delete(`/users/${e}`)}},o="/pricing",P={create:async e=>(await s.post(`${o}`,e)).data,getAll:async()=>(await s.get(`${o}`)).data,getById:async e=>(await s.get(`${o}/${e}`)).data,getByRentalId:async e=>{try{return(await s.get(`${o}/rental/${e}`)).data}catch(t){if(t.response&&t.response.status===404)return null;throw t}},update:async(e,t)=>(await s.put(`${o}/${e}`,t)).data,delete:async e=>{await s.delete(`${o}/${e}`)}},B={healthCheck:async()=>(await s.get("/health")).data,triggerEmailNotifications:async()=>(await s.get("/validate_email")).data,sendCustomEmail:async e=>(await s.post("/emails/custom",e)).data,triggerAnnualRenewalReminders:async e=>(await s.post("/emails/annual-renewal-reminders",e)).data},R={requestSignature:async e=>(await s.post("/contract-signing/request",e)).data,getSignatureStatus:async e=>(await y.get(`/public/contract-signing/status/${e}`)).data,signContract:async e=>(await y.post(`/public/contract-signing/sign/${e}`)).data,rejectContract:async e=>(await y.post(`/public/contract-signing/reject/${e}`)).data};export{l as a,g as b,w as c,P as d,B as e,R as f,d as m,f as p,u as r,A as u};
